import os
from ultralytics import YOLO
import sys

def load_and_inspect_model(model_path, model_name):
    """Carga un modelo YOLO y muestra sus clases"""
    print(f"\n{'='*60}")
    print(f"üîç INSPECCIONANDO: {model_name}")
    print(f"üìÅ Ruta: {model_path}")
    print(f"{'='*60}")
    
    try:
        # Verificar si el archivo existe
        if not os.path.exists(model_path):
            print(f"‚ùå ERROR: Archivo '{model_path}' no encontrado")
            print(f"üí° Aseg√∫rate de que el archivo est√© en el directorio actual")
            return None
        
        # Cargar el modelo
        print("‚è≥ Cargando modelo...")
        model = YOLO(model_path)
        print("‚úÖ Modelo cargado exitosamente")
        
        # Obtener informaci√≥n del modelo
        if hasattr(model, 'names') and model.names:
            class_names = model.names
            print(f"\nüìã CLASES DETECTADAS EN {model_name}:")
            print(f"üìä Total de clases: {len(class_names)}")
            print("-" * 50)
            
            # Mostrar todas las clases con √≠ndice
            for class_id, class_name in class_names.items():
                print(f"  {class_id:2d}: {class_name}")
            
            return class_names
        else:
            print("‚ùå No se pudieron obtener los nombres de las clases")
            return None
            
    except Exception as e:
        print(f"‚ùå ERROR al cargar modelo: {str(e)}")
        return None

def compare_models(primary_classes, direction_classes):
    """Compara las clases de ambos modelos"""
    print(f"\n{'='*60}")
    print("üîÑ COMPARACI√ìN DE MODELOS")
    print(f"{'='*60}")
    
    if primary_classes is None or direction_classes is None:
        print("‚ùå No se pueden comparar modelos - Error en la carga")
        return
    
    # Convertir a sets para comparaci√≥n
    primary_set = set(primary_classes.values())
    direction_set = set(direction_classes.values())
    
    # Clases en com√∫n
    common_classes = primary_set.intersection(direction_set)
    
    # Clases √∫nicas de cada modelo
    primary_unique = primary_set - direction_set
    direction_unique = direction_set - primary_set
    
    print(f"üìä ESTAD√çSTICAS:")
    print(f"  ‚îú‚îÄ Modelo Principal: {len(primary_classes)} clases")
    print(f"  ‚îú‚îÄ Modelo Direcciones: {len(direction_classes)} clases")
    print(f"  ‚îú‚îÄ Clases en com√∫n: {len(common_classes)}")
    print(f"  ‚îú‚îÄ Solo en Principal: {len(primary_unique)}")
    print(f"  ‚îî‚îÄ Solo en Direcciones: {len(direction_unique)}")
    
    if common_classes:
        print(f"\nüîÑ CLASES EN COM√öN:")
        for class_name in sorted(common_classes):
            print(f"  ‚Ä¢ {class_name}")
    
    if primary_unique:
        print(f"\nüîµ SOLO EN MODELO PRINCIPAL:")
        for class_name in sorted(primary_unique):
            print(f"  ‚Ä¢ {class_name}")
    
    if direction_unique:
        print(f"\nüü¢ SOLO EN MODELO DIRECCIONES:")
        for class_name in sorted(direction_unique):
            print(f"  ‚Ä¢ {class_name}")

def suggest_hierarchy_setup(primary_classes, direction_classes):
    """Sugiere configuraci√≥n de jerarqu√≠a"""
    print(f"\n{'='*60}")
    print("üí° SUGERENCIAS PARA JERARQU√çA")
    print(f"{'='*60}")
    
    if primary_classes is None or direction_classes is None:
        return
    
    # Identificar se√±ales de direcci√≥n
    direction_keywords = ['turn', 'left', 'right', 'arrow']
    
    primary_directions = []
    direction_directions = []
    
    for class_name in primary_classes.values():
        if any(keyword in class_name.lower() for keyword in direction_keywords):
            primary_directions.append(class_name)
    
    for class_name in direction_classes.values():
        if any(keyword in class_name.lower() for keyword in direction_keywords):
            direction_directions.append(class_name)
    
    print("üéØ CONFIGURACI√ìN RECOMENDADA:")
    print("\nüîµ MODELO PRINCIPAL (Modelo.pt) - Se√±ales generales:")
    non_direction_classes = [name for name in primary_classes.values() 
                           if not any(keyword in name.lower() for keyword in direction_keywords)]
    
    for class_name in sorted(non_direction_classes):
        print(f"  ‚úÖ {class_name}")
    
    if primary_directions:
        print("\n  ‚ö†Ô∏è  Direcciones encontradas (considerar mover a Modelo3.pt):")
        for class_name in sorted(primary_directions):
            print(f"  ‚ö° {class_name}")
    
    print("\nüü¢ MODELO DIRECCIONES (Modelo3.pt) - Solo direcciones:")
    for class_name in sorted(direction_directions):
        print(f"  ‚úÖ {class_name}")

def main():
    print("üöó INSPECTOR DE MODELOS YOLO - PUZZLEBOT")
    print("üéØ Analizando modelos para sistema jer√°rquico")
    
    # Rutas de los modelos
    primary_model_path = "/home/alfonso/puzzlebot-ros2-control/src/detector_pkg/detector_pkg/Modelo.pt"      # Modelo principal
    direction_model_path = "/home/alfonso/puzzlebot-ros2-control/src/detector_pkg/detector_pkg/Modelo3.pt"   # Modelo de direcciones
    
    # Cargar e inspeccionar modelo principal
    primary_classes = load_and_inspect_model(
        primary_model_path, 
        "MODELO PRINCIPAL (Modelo.pt)"
    )
    
    # Cargar e inspeccionar modelo de direcciones
    direction_classes = load_and_inspect_model(
        direction_model_path, 
        "MODELO DIRECCIONES (Modelo3.pt)"
    )
    
    # Comparar modelos
    compare_models(primary_classes, direction_classes)
    
    # Sugerir configuraci√≥n de jerarqu√≠a
    suggest_hierarchy_setup(primary_classes, direction_classes)
    
    print(f"\n{'='*60}")
    print("‚úÖ INSPECCI√ìN COMPLETADA")
    print("üí° Usa esta informaci√≥n para configurar tu sistema jer√°rquico")
    print(f"{'='*60}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë Inspecci√≥n cancelada por usuario")
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        print("üí° Aseg√∫rate de tener los archivos Modelo.pt y Modelo3.pt en el directorio actual")
    
    input("\nüì± Presiona Enter para salir...")